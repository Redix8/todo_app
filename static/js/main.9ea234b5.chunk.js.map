{"version":3,"sources":["components/EditTodo.js","components/TodoCard.js","components/DoneCard.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["EditTodo","state","open","title","contents","deadline","handleClickOpen","_this","setState","handleClose","setTitleValue","evt","target","value","setContentsValue","setDeadlineValue","submitData","props","onUpdate","_this$props$data","this","data","_this$props$data2","react_default","a","createElement","index_es","onClick","Edit_default","fontSize","onClose","label","variant","fullWidth","margin","required","onChange","defaultValue","multiline","rows","type","Component","TodoCard","handleRemove","_this$props","info","onRemove","id","handleUpdate","_this$props2","handleDone","_this$props3","onDone","handleMoveUP","_this$props4","onMove","handleMoveDown","_this$props5","_this$props$info","Grid_default","item","xs","style","backgroundColor","color","container","alignItems","direction","IconButton_default","icons_index_es","Typography_default","align","idx","EditTodo_EditTodo","split","map","txt","Fragment","defaultProps","DoneCard","action","Delete_default","AddTodo","onCreate","AddCircleOutline_default","App","todoInfo","doneInfo","componentDidMount","localStorage","JSON","parse","time","Date","now","setInterval","componentDidUpdate","stringify","handleCreate","concat","Object","objectSpread","key","defineProperty","filter","_this$state","handleMove","findIndex","tmp","length","_this2","listTodo","getTime","TodoCard_TodoCard","listDone","DoneCard_DoneCard","spacing","AddTodo_AddTodo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ea234b5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { IconButton, Dialog, DialogContent, TextField, DialogActions, Button } from '../../node_modules/@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\n\r\n\r\nexport default class EditTodo extends Component {\r\n    state={\r\n        open: false,\r\n        title: '',\r\n        contents:'',\r\n        deadline:'',\r\n    }\r\n    componentDidMount(){\r\n        const {title, contents, deadline} = this.props.data\r\n        this.setState({title, contents, deadline})\r\n    }\r\n\r\n    handleClickOpen = () =>{\r\n        this.setState({open:true})\r\n    }\r\n\r\n    handleClose=()=>{\r\n        this.setState({open:false})\r\n    }\r\n\r\n    setTitleValue=(evt)=>{\r\n        this.setState({title:evt.target.value})\r\n    }\r\n    setContentsValue=(evt)=>{\r\n        this.setState({contents:evt.target.value})\r\n    }\r\n    setDeadlineValue=(evt)=>{\r\n        this.setState({deadline:evt.target.value})\r\n    }\r\n    submitData=()=>{\r\n        this.props.onUpdate(this.state)\r\n        this.setState({\r\n            open:false            \r\n        })\r\n    }\r\n\r\n  render() {\r\n      const {title, contents, deadline} = this.props.data      \r\n    return (\r\n      <div>\r\n        <IconButton onClick={this.handleClickOpen}>\r\n            <EditIcon fontSize='small'/>\r\n        </IconButton>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n        >\r\n          <DialogContent>\r\n              <TextField\r\n                label='Title'\r\n                variant='outlined'\r\n                fullWidth\r\n                margin='dense'\r\n                required\r\n                onChange={this.setTitleValue}\r\n                defaultValue = {title}\r\n              />\r\n              <TextField\r\n                label='Contents'\r\n                multiline\r\n                rows='4'\r\n                variant='outlined'\r\n                fullWidth\r\n                margin='dense'\r\n                required\r\n                onChange={this.setContentsValue}\r\n                defaultValue={contents}\r\n              />              \r\n              <TextField\r\n                label='Deadline'                \r\n                type='datetime-local'\r\n                variant='outlined'\r\n                margin='dense'\r\n                defaultValue= {deadline||'2010-01-01T00:00'}\r\n                onChange={this.setDeadlineValue}\r\n                \r\n               />\r\n           </DialogContent>\r\n           <DialogActions>\r\n               <Button onClick={this.handleClose}>\r\n                   Cancel\r\n                </Button>\r\n               <Button onClick={this.submitData}>\r\n                   OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport {Card, CardContent, CardHeader, CardActions} from '../../node_modules/@material-ui/core';\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport {Delete, Done, KeyboardArrowUp, KeyboardArrowDown} from '@material-ui/icons'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport EditTodo from './EditTodo'\r\n\r\nexport default class TodoCard extends Component {\r\n    static defaultProps ={\r\n        info:{\r\n            id:0,\r\n            title:'',\r\n            contents:'',\r\n            deadline:'',\r\n        }\r\n    }\r\n    handleRemove=()=>{\r\n        const {info, onRemove} = this.props\r\n        onRemove(info.id, \"todoInfo\")\r\n    }\r\n    handleUpdate=(data)=>{\r\n        const {info, onUpdate} = this.props\r\n        onUpdate(info.id, data)\r\n    }\r\n    handleDone=()=>{\r\n        const {info, onDone} = this.props\r\n        onDone(info.id)\r\n    }\r\n    handleMoveUP=()=>{\r\n        const {info, onMove} = this.props\r\n        onMove(info.id, 'Up')\r\n    }\r\n    handleMoveDown=()=>{\r\n        const {info, onMove} = this.props\r\n        onMove(info.id, 'Down')\r\n    }\r\n    render() {        \r\n        const {title, contents, deadline} = this.props.info\r\n        return (\r\n            <Grid item xs={12}>\r\n                <Card style={{backgroundColor:this.props.color}}>\r\n                    <Grid container>\r\n                        <Grid container item xs={4} alignItems='center'>\r\n\r\n                            <Grid item>\r\n                                <Grid container item direction={\"column\"}>\r\n                                    <Grid item>\r\n                                        <IconButton onClick={this.handleMoveUP}>\r\n                                            <KeyboardArrowUp/>\r\n                                        </IconButton>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <IconButton onClick={this.handleMoveDown}>\r\n                                            <KeyboardArrowDown/>\r\n                                        </IconButton>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item>\r\n                                <CardContent>                                    \r\n                                    <Typography align='center' variant='h5'>\r\n                                        {this.props.idx+1}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <EditTodo onUpdate={this.handleUpdate} data={this.props.info}/>\r\n                                    <IconButton onClick={this.handleDone}>\r\n                                        <Done fontSize='small'/>\r\n                                    </IconButton>\r\n                                    <IconButton onClick={this.handleRemove}>\r\n                                        <Delete fontSize='small'/>\r\n                                    </IconButton>\r\n                                </CardActions>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        <Grid item xs={8}>\r\n                            <CardHeader title={title}/>\r\n                            <CardContent>\r\n                                <Typography>\r\n                                    {contents.split('\\n').map(txt => <>{txt}<br/></>)}                               \r\n                                </Typography>\r\n                                <Typography>\r\n                                    Deadline : {deadline}\r\n                                </Typography>\r\n                            </CardContent>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { Grid, Card, CardHeader, CardContent, Typography, IconButton } from '../../node_modules/@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nexport default class DoneCard extends Component {\r\n    static defaultProps={\r\n        info:{\r\n            title:'',\r\n            contents:''\r\n        }\r\n    }\r\n    handleRemove=()=>{\r\n        const {info, onRemove} = this.props\r\n        onRemove(info.id, \"doneInfo\")\r\n    }\r\n  render() {\r\n      const {title, contents} = this.props.info\r\n    return (\r\n        <Grid item xs={12}>        \r\n            <Card>\r\n                <CardHeader \r\n                    title = {title}\r\n                    action = {\r\n                        <IconButton onClick={this.handleRemove}>\r\n                            <DeleteIcon/>\r\n                        </IconButton>                                                    \r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <Typography>\r\n                        {contents}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n      \r\n        </Grid>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { IconButton, Dialog, DialogContent, TextField, DialogActions, Button } from '../../node_modules/@material-ui/core';\r\nimport AddIcon from '@material-ui/icons/AddCircleOutline'\r\n\r\nexport default class AddTodo extends Component {\r\n    state={\r\n        open:false,\r\n        title:'',\r\n        contents:'',\r\n        deadline:'',\r\n    }\r\n\r\n    handleClickOpen = () =>{\r\n        this.setState({open:true})\r\n    }\r\n\r\n    handleClose=()=>{\r\n        this.setState({open:false})\r\n    }\r\n\r\n    setTitleValue=(evt)=>{\r\n        this.setState({title:evt.target.value})\r\n    }\r\n    setContentsValue=(evt)=>{\r\n        this.setState({contents:evt.target.value})\r\n    }\r\n    setDeadlineValue=(evt)=>{\r\n        this.setState({deadline:evt.target.value})\r\n    }\r\n    submitData=()=>{\r\n        this.props.onCreate(this.state)\r\n        this.setState({\r\n            open:false,\r\n            title:'',\r\n            contents:'',\r\n            deadline:'',\r\n        })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <IconButton onClick={this.handleClickOpen}>\r\n          <AddIcon/>\r\n        </IconButton>\r\n        <Dialog\r\n          open={this.state.open}\r\n          onClose={this.handleClose}\r\n        >\r\n          <DialogContent>\r\n              <TextField\r\n                label='Title'\r\n                variant='outlined'\r\n                fullWidth\r\n                margin='dense'\r\n                required\r\n                onChange={this.setTitleValue}\r\n              />\r\n              <TextField\r\n                label='Contents'\r\n                multiline\r\n                rows='4'\r\n                variant='outlined'\r\n                fullWidth\r\n                margin='dense'\r\n                required\r\n                onChange={this.setContentsValue}\r\n              />              \r\n              <TextField\r\n                label='Deadline'                \r\n                type='datetime-local'\r\n                variant='outlined'\r\n                margin='dense'\r\n                defaultValue='2010-01-01T00:00'\r\n                onChange={this.setDeadlineValue}\r\n               />\r\n           </DialogContent>\r\n           <DialogActions>\r\n               <Button onClick={this.handleClose}>\r\n                   Cancel\r\n                </Button>\r\n               <Button onClick={this.submitData}>\r\n                   OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Paper } from '../node_modules/@material-ui/core';\r\nimport TodoCard from './components/TodoCard'\r\nimport DoneCard from './components/DoneCard'\r\nimport AddTodo from './components/AddTodo'\r\n\r\nclass App extends Component {\r\n  id = 0\r\n  state ={\r\n    todoInfo:[],\r\n    doneInfo:[],\r\n  }\r\n  componentDidMount=()=>{\r\n    if(localStorage.state){\r\n      this.setState(JSON.parse(localStorage.state))\r\n    }\r\n\r\n    this.setState({time:Date.now()})\r\n    setInterval(()=>{\r\n      this.setState({\r\n        time: Date.now()\r\n      })\r\n    },60000)    \r\n  }\r\n  componentDidUpdate=()=>{\r\n    localStorage.state = JSON.stringify(this.state)    \r\n  }\r\n\r\n  handleCreate =(data)=>{\r\n    const {todoInfo} = this.state\r\n    this.setState({\r\n      todoInfo: todoInfo.concat({id: this.id++, ...data})\r\n    })    \r\n  }\r\n  handleRemove=(id, key)=>{\r\n    const info = this.state[key]\r\n    this.setState({\r\n      [key]: info.filter(info=> info.id !== id)\r\n    })\r\n  }\r\n  handleUpdate=(id, data)=>{\r\n    const {todoInfo} = this.state\r\n    this.setState({\r\n      todoInfo: todoInfo.map(\r\n        info => id === info.id\r\n        ?{ ...info, ...data}\r\n        : info\r\n      )\r\n    })\r\n  }\r\n  handleDone=(id)=>{\r\n    const {todoInfo, doneInfo} = this.state\r\n    this.setState({\r\n      todoInfo: todoInfo.filter(info=> info.id !== id),\r\n      doneInfo: doneInfo.concat(todoInfo.filter(info=> info.id === id))\r\n    })\r\n  }\r\n  handleMove=(id, key)=>{\r\n    let {todoInfo} = this.state\r\n    let idx = todoInfo.findIndex(info=>id===info.id)\r\n    let tmp = todoInfo[idx]\r\n    \r\n    if (key==='Up'){\r\n      if (0<idx){\r\n        todoInfo[idx]=todoInfo[idx-1]\r\n        todoInfo[idx-1]=tmp\r\n      }\r\n    }else{\r\n      if(idx+1<todoInfo.length){\r\n        todoInfo[idx]=todoInfo[idx+1]\r\n        todoInfo[idx+1]=tmp\r\n      }        \r\n    }\r\n    this.setState({todoInfo})    \r\n  }\r\n\r\n  render() {\r\n    const todoData=this.state.todoInfo    \r\n    const listTodo = todoData.map((data, idx)=>{\r\n      let color = 'default'\r\n      const deadline = new Date(data.deadline).getTime()\r\n\r\n      if (deadline < this.state.time){\r\n        color='#FF8A80'        \r\n      }\r\n      return(\r\n        <TodoCard \r\n          key={data.id} \r\n          info={data}\r\n          idx={idx}\r\n          color={color}\r\n          onRemove={this.handleRemove}\r\n          onUpdate={this.handleUpdate}\r\n          onDone={this.handleDone}\r\n          onMove={this.handleMove}          \r\n          />\r\n      )\r\n    })\r\n  \r\n    const doneData=this.state.doneInfo\r\n    const listDone = doneData.map(data=>(\r\n      <DoneCard \r\n        key={data.id}\r\n        info={data}\r\n        onRemove={this.handleRemove}\r\n      />\r\n    ))\r\n    \r\n\r\n    return (\r\n      <Grid container direction='column' spacing={24}>\r\n        <Grid item>        \r\n          <Typography variant=\"h1\" align=\"center\">\r\n            To Do List\r\n          </Typography>\r\n        </Grid>        \r\n\r\n        <Grid container item spacing={16} xs={12} alignItems='flex-start'>\r\n          <Grid container item xs={7} spacing={16}>\r\n            <Grid item xs={12}>\r\n              <Paper>\r\n                <Grid container>\r\n                  <Grid item xs={11}>\r\n                    <Typography align='center' variant='h3'>                \r\n                        TODO\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <AddTodo onCreate={this.handleCreate}/>\r\n                  </Grid>\r\n                </Grid>\r\n              </Paper>\r\n              \r\n            </Grid>\r\n            {listTodo}\r\n                        \r\n          </Grid>\r\n  \r\n          <Grid container item xs={5} spacing={16}>\r\n            <Grid item xs={12}>\r\n              <Paper>\r\n                <Typography align='center' variant='h3'>\r\n                  DONE\r\n                </Typography>\r\n              </Paper>\r\n            </Grid>\r\n            {listDone}\r\n          </Grid>\r\n\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}